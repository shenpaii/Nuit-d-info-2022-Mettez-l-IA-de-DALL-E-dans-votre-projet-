{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msi\\\\Desktop\\\\defi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { InputBox } from \"./InputBox\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_API_Key\n});\nconst openai = new OpenAIApi(configuration);\nfunction App() {\n  _s();\n  const [userPrompt, setUserPrompt] = useState(\"\");\n  const [number, setNumber] = useState(1);\n  const [size, setSize] = useState(\"256x256\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const generateImage = async () => {\n    const imageParameters = {\n      prompt: userPrompt,\n      n: parseInt(number),\n      size: size\n    };\n    const response = await openai.createImage(imageParameters);\n    const urlData = response.data.data[0].url;\n    setImageUrl(urlData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"App\",\n    children: [imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageUrl,\n      className: \"image\",\n      alt: \"imageUrl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Description\",\n      setAttribute: setUserPrompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Amount\",\n      setAttribute: setNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      label: \"Size\",\n      setAttribute: setSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"main-button\",\n      onClick: generateImage,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RwHRR6oE5174cg03OngHcqt8TjY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["InputBox","Configuration","OpenAIApi","React","useState","configuration","apiKey","process","env","REACT_APP_API_Key","openai","App","userPrompt","setUserPrompt","number","setNumber","size","setSize","imageUrl","setImageUrl","generateImage","imageParameters","prompt","n","parseInt","response","createImage","urlData","data","url"],"sources":["C:/Users/msi/Desktop/defi/src/App.js"],"sourcesContent":["import { InputBox } from \"./InputBox\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport React, { useState } from 'react';\n\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_API_Key,\n\n \n});\nconst openai = new OpenAIApi(configuration);\n\nfunction App() {\n  const [userPrompt, setUserPrompt] = useState(\"\");\n  const [number, setNumber] = useState(1);\n  const [size, setSize] = useState(\"256x256\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const generateImage = async () => {\n   \n    const imageParameters = {\n     prompt: userPrompt,\n     n: parseInt(number),\n     size: size,\n    }\n   \n    const response = await openai.createImage(imageParameters);\n    const urlData = response.data.data[0].url;\n  setImageUrl(urlData);\n\n  };\n  return (\n    \n    <main className=\"App\">\n      \n      {imageUrl && <img src={imageUrl} className=\"image\" alt=\"imageUrl\" />}\n      <InputBox label={\"Description\"} setAttribute={setUserPrompt} />\n      <InputBox label={\"Amount\"} setAttribute={setNumber} />\n      <InputBox label={\"Size\"} setAttribute={setSize}/>\n      <button className=\"main-button\" onClick={generateImage}>Generate</button>\n      \n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,aAAa,GAAG,IAAIJ,aAAa,CAAC;EACtCK,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AAGtB,CAAC,CAAC;AACF,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAACG,aAAa,CAAC;AAE3C,SAASM,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,SAAS,CAAC;EAC3C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgB,aAAa,GAAG,YAAY;IAEhC,MAAMC,eAAe,GAAG;MACvBC,MAAM,EAAEV,UAAU;MAClBW,CAAC,EAAEC,QAAQ,CAACV,MAAM,CAAC;MACnBE,IAAI,EAAEA;IACP,CAAC;IAED,MAAMS,QAAQ,GAAG,MAAMf,MAAM,CAACgB,WAAW,CAACL,eAAe,CAAC;IAC1D,MAAMM,OAAO,GAAGF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG;IAC3CV,WAAW,CAACQ,OAAO,CAAC;EAEpB,CAAC;EACD,oBAEE;IAAM,SAAS,EAAC,KAAK;IAAA,WAElBT,QAAQ,iBAAI;MAAK,GAAG,EAAEA,QAAS;MAAC,SAAS,EAAC,OAAO;MAAC,GAAG,EAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACpE,QAAC,QAAQ;MAAC,KAAK,EAAE,aAAc;MAAC,YAAY,EAAEL;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eAC/D,QAAC,QAAQ;MAAC,KAAK,EAAE,QAAS;MAAC,YAAY,EAAEE;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACtD,QAAC,QAAQ;MAAC,KAAK,EAAE,MAAO;MAAC,YAAY,EAAEE;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAE,eACjD;MAAQ,SAAS,EAAC,aAAa;MAAC,OAAO,EAAEG,aAAc;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEpE;AAEX;AAAC,GA/BQT,GAAG;AAAA,KAAHA,GAAG;AAiCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}